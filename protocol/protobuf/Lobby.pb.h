// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Lobby_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Lobby_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Lobby_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Lobby_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Lobby_2eproto;
namespace Lobby {
class ConnectRoom;
struct ConnectRoomDefaultTypeInternal;
extern ConnectRoomDefaultTypeInternal _ConnectRoom_default_instance_;
class CreateRoom;
struct CreateRoomDefaultTypeInternal;
extern CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
class RoomList;
struct RoomListDefaultTypeInternal;
extern RoomListDefaultTypeInternal _RoomList_default_instance_;
class RoomList_Room;
struct RoomList_RoomDefaultTypeInternal;
extern RoomList_RoomDefaultTypeInternal _RoomList_Room_default_instance_;
class SelectRoom;
struct SelectRoomDefaultTypeInternal;
extern SelectRoomDefaultTypeInternal _SelectRoom_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class UserList_User;
struct UserList_UserDefaultTypeInternal;
extern UserList_UserDefaultTypeInternal _UserList_User_default_instance_;
}  // namespace Lobby
PROTOBUF_NAMESPACE_OPEN
template<> ::Lobby::ConnectRoom* Arena::CreateMaybeMessage<::Lobby::ConnectRoom>(Arena*);
template<> ::Lobby::CreateRoom* Arena::CreateMaybeMessage<::Lobby::CreateRoom>(Arena*);
template<> ::Lobby::RoomList* Arena::CreateMaybeMessage<::Lobby::RoomList>(Arena*);
template<> ::Lobby::RoomList_Room* Arena::CreateMaybeMessage<::Lobby::RoomList_Room>(Arena*);
template<> ::Lobby::SelectRoom* Arena::CreateMaybeMessage<::Lobby::SelectRoom>(Arena*);
template<> ::Lobby::UserList* Arena::CreateMaybeMessage<::Lobby::UserList>(Arena*);
template<> ::Lobby::UserList_User* Arena::CreateMaybeMessage<::Lobby::UserList_User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Lobby {

enum RoomType : int {
  PUBLIC = 0,
  PRIVATE = 1,
  RoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomType_IsValid(int value);
constexpr RoomType RoomType_MIN = PUBLIC;
constexpr RoomType RoomType_MAX = PRIVATE;
constexpr int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor();
template<typename T>
inline const std::string& RoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomType_descriptor(), enum_t_value);
}
inline bool RoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
// ===================================================================

class RoomList_Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.RoomList.Room) */ {
 public:
  inline RoomList_Room() : RoomList_Room(nullptr) {}
  ~RoomList_Room() override;
  explicit PROTOBUF_CONSTEXPR RoomList_Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomList_Room(const RoomList_Room& from);
  RoomList_Room(RoomList_Room&& from) noexcept
    : RoomList_Room() {
    *this = ::std::move(from);
  }

  inline RoomList_Room& operator=(const RoomList_Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomList_Room& operator=(RoomList_Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomList_Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomList_Room* internal_default_instance() {
    return reinterpret_cast<const RoomList_Room*>(
               &_RoomList_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomList_Room& a, RoomList_Room& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomList_Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomList_Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomList_Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomList_Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomList_Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomList_Room& from) {
    RoomList_Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomList_Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.RoomList.Room";
  }
  protected:
  explicit RoomList_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kCntUserFieldNumber = 3,
    kMaxUserFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 cnt_user = 3;
  void clear_cnt_user();
  int32_t cnt_user() const;
  void set_cnt_user(int32_t value);
  private:
  int32_t _internal_cnt_user() const;
  void _internal_set_cnt_user(int32_t value);
  public:

  // int32 max_user = 4;
  void clear_max_user();
  int32_t max_user() const;
  void set_max_user(int32_t value);
  private:
  int32_t _internal_max_user() const;
  void _internal_set_max_user(int32_t value);
  public:

  // .Lobby.RoomType type = 5;
  void clear_type();
  ::Lobby::RoomType type() const;
  void set_type(::Lobby::RoomType value);
  private:
  ::Lobby::RoomType _internal_type() const;
  void _internal_set_type(::Lobby::RoomType value);
  public:

  // @@protoc_insertion_point(class_scope:Lobby.RoomList.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t cnt_user_;
    int32_t max_user_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class RoomList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.RoomList) */ {
 public:
  inline RoomList() : RoomList(nullptr) {}
  ~RoomList() override;
  explicit PROTOBUF_CONSTEXPR RoomList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomList(const RoomList& from);
  RoomList(RoomList&& from) noexcept
    : RoomList() {
    *this = ::std::move(from);
  }

  inline RoomList& operator=(const RoomList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomList& operator=(RoomList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomList* internal_default_instance() {
    return reinterpret_cast<const RoomList*>(
               &_RoomList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomList& a, RoomList& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomList& from) {
    RoomList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.RoomList";
  }
  protected:
  explicit RoomList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoomList_Room Room;

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .Lobby.RoomList.Room rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::Lobby::RoomList_Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::RoomList_Room >*
      mutable_rooms();
  private:
  const ::Lobby::RoomList_Room& _internal_rooms(int index) const;
  ::Lobby::RoomList_Room* _internal_add_rooms();
  public:
  const ::Lobby::RoomList_Room& rooms(int index) const;
  ::Lobby::RoomList_Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::RoomList_Room >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:Lobby.RoomList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::RoomList_Room > rooms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class SelectRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.SelectRoom) */ {
 public:
  inline SelectRoom() : SelectRoom(nullptr) {}
  ~SelectRoom() override;
  explicit PROTOBUF_CONSTEXPR SelectRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRoom(const SelectRoom& from);
  SelectRoom(SelectRoom&& from) noexcept
    : SelectRoom() {
    *this = ::std::move(from);
  }

  inline SelectRoom& operator=(const SelectRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRoom& operator=(SelectRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRoom* internal_default_instance() {
    return reinterpret_cast<const SelectRoom*>(
               &_SelectRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelectRoom& a, SelectRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectRoom& from) {
    SelectRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.SelectRoom";
  }
  protected:
  explicit SelectRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMaxUserFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 max_user = 2;
  void clear_max_user();
  int32_t max_user() const;
  void set_max_user(int32_t value);
  private:
  int32_t _internal_max_user() const;
  void _internal_set_max_user(int32_t value);
  public:

  // .Lobby.RoomType type = 3;
  void clear_type();
  ::Lobby::RoomType type() const;
  void set_type(::Lobby::RoomType value);
  private:
  ::Lobby::RoomType _internal_type() const;
  void _internal_set_type(::Lobby::RoomType value);
  public:

  // @@protoc_insertion_point(class_scope:Lobby.SelectRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t max_user_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class CreateRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.CreateRoom) */ {
 public:
  inline CreateRoom() : CreateRoom(nullptr) {}
  ~CreateRoom() override;
  explicit PROTOBUF_CONSTEXPR CreateRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoom(const CreateRoom& from);
  CreateRoom(CreateRoom&& from) noexcept
    : CreateRoom() {
    *this = ::std::move(from);
  }

  inline CreateRoom& operator=(const CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoom& operator=(CreateRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoom* internal_default_instance() {
    return reinterpret_cast<const CreateRoom*>(
               &_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRoom& a, CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoom& from) {
    CreateRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.CreateRoom";
  }
  protected:
  explicit CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMaxUserFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 max_user = 2;
  void clear_max_user();
  int32_t max_user() const;
  void set_max_user(int32_t value);
  private:
  int32_t _internal_max_user() const;
  void _internal_set_max_user(int32_t value);
  public:

  // .Lobby.RoomType type = 3;
  void clear_type();
  ::Lobby::RoomType type() const;
  void set_type(::Lobby::RoomType value);
  private:
  ::Lobby::RoomType _internal_type() const;
  void _internal_set_type(::Lobby::RoomType value);
  public:

  // @@protoc_insertion_point(class_scope:Lobby.CreateRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t max_user_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class ConnectRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.ConnectRoom) */ {
 public:
  inline ConnectRoom() : ConnectRoom(nullptr) {}
  ~ConnectRoom() override;
  explicit PROTOBUF_CONSTEXPR ConnectRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectRoom(const ConnectRoom& from);
  ConnectRoom(ConnectRoom&& from) noexcept
    : ConnectRoom() {
    *this = ::std::move(from);
  }

  inline ConnectRoom& operator=(const ConnectRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRoom& operator=(ConnectRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectRoom* internal_default_instance() {
    return reinterpret_cast<const ConnectRoom*>(
               &_ConnectRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectRoom& a, ConnectRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectRoom& from) {
    ConnectRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.ConnectRoom";
  }
  protected:
  explicit ConnectRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Lobby.ConnectRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class UserList_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.UserList.User) */ {
 public:
  inline UserList_User() : UserList_User(nullptr) {}
  ~UserList_User() override;
  explicit PROTOBUF_CONSTEXPR UserList_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList_User(const UserList_User& from);
  UserList_User(UserList_User&& from) noexcept
    : UserList_User() {
    *this = ::std::move(from);
  }

  inline UserList_User& operator=(const UserList_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList_User& operator=(UserList_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList_User* internal_default_instance() {
    return reinterpret_cast<const UserList_User*>(
               &_UserList_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserList_User& a, UserList_User& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserList_User& from) {
    UserList_User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.UserList.User";
  }
  protected:
  explicit UserList_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Lobby.UserList.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lobby.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit PROTOBUF_CONSTEXPR UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserList& from) {
    UserList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lobby.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserList_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .Lobby.UserList.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::Lobby::UserList_User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::UserList_User >*
      mutable_users();
  private:
  const ::Lobby::UserList_User& _internal_users(int index) const;
  ::Lobby::UserList_User* _internal_add_users();
  public:
  const ::Lobby::UserList_User& users(int index) const;
  ::Lobby::UserList_User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::UserList_User >&
      users() const;

  // @@protoc_insertion_point(class_scope:Lobby.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::UserList_User > users_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lobby_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomList_Room

// int32 id = 1;
inline void RoomList_Room::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t RoomList_Room::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RoomList_Room::id() const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.Room.id)
  return _internal_id();
}
inline void RoomList_Room::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void RoomList_Room::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Lobby.RoomList.Room.id)
}

// string name = 2;
inline void RoomList_Room::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoomList_Room::name() const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.Room.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomList_Room::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Lobby.RoomList.Room.name)
}
inline std::string* RoomList_Room::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Lobby.RoomList.Room.name)
  return _s;
}
inline const std::string& RoomList_Room::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoomList_Room::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomList_Room::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomList_Room::release_name() {
  // @@protoc_insertion_point(field_release:Lobby.RoomList.Room.name)
  return _impl_.name_.Release();
}
inline void RoomList_Room::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Lobby.RoomList.Room.name)
}

// int32 cnt_user = 3;
inline void RoomList_Room::clear_cnt_user() {
  _impl_.cnt_user_ = 0;
}
inline int32_t RoomList_Room::_internal_cnt_user() const {
  return _impl_.cnt_user_;
}
inline int32_t RoomList_Room::cnt_user() const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.Room.cnt_user)
  return _internal_cnt_user();
}
inline void RoomList_Room::_internal_set_cnt_user(int32_t value) {
  
  _impl_.cnt_user_ = value;
}
inline void RoomList_Room::set_cnt_user(int32_t value) {
  _internal_set_cnt_user(value);
  // @@protoc_insertion_point(field_set:Lobby.RoomList.Room.cnt_user)
}

// int32 max_user = 4;
inline void RoomList_Room::clear_max_user() {
  _impl_.max_user_ = 0;
}
inline int32_t RoomList_Room::_internal_max_user() const {
  return _impl_.max_user_;
}
inline int32_t RoomList_Room::max_user() const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.Room.max_user)
  return _internal_max_user();
}
inline void RoomList_Room::_internal_set_max_user(int32_t value) {
  
  _impl_.max_user_ = value;
}
inline void RoomList_Room::set_max_user(int32_t value) {
  _internal_set_max_user(value);
  // @@protoc_insertion_point(field_set:Lobby.RoomList.Room.max_user)
}

// .Lobby.RoomType type = 5;
inline void RoomList_Room::clear_type() {
  _impl_.type_ = 0;
}
inline ::Lobby::RoomType RoomList_Room::_internal_type() const {
  return static_cast< ::Lobby::RoomType >(_impl_.type_);
}
inline ::Lobby::RoomType RoomList_Room::type() const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.Room.type)
  return _internal_type();
}
inline void RoomList_Room::_internal_set_type(::Lobby::RoomType value) {
  
  _impl_.type_ = value;
}
inline void RoomList_Room::set_type(::Lobby::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Lobby.RoomList.Room.type)
}

// -------------------------------------------------------------------

// RoomList

// repeated .Lobby.RoomList.Room rooms = 1;
inline int RoomList::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int RoomList::rooms_size() const {
  return _internal_rooms_size();
}
inline void RoomList::clear_rooms() {
  _impl_.rooms_.Clear();
}
inline ::Lobby::RoomList_Room* RoomList::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:Lobby.RoomList.rooms)
  return _impl_.rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::RoomList_Room >*
RoomList::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:Lobby.RoomList.rooms)
  return &_impl_.rooms_;
}
inline const ::Lobby::RoomList_Room& RoomList::_internal_rooms(int index) const {
  return _impl_.rooms_.Get(index);
}
inline const ::Lobby::RoomList_Room& RoomList::rooms(int index) const {
  // @@protoc_insertion_point(field_get:Lobby.RoomList.rooms)
  return _internal_rooms(index);
}
inline ::Lobby::RoomList_Room* RoomList::_internal_add_rooms() {
  return _impl_.rooms_.Add();
}
inline ::Lobby::RoomList_Room* RoomList::add_rooms() {
  ::Lobby::RoomList_Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:Lobby.RoomList.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::RoomList_Room >&
RoomList::rooms() const {
  // @@protoc_insertion_point(field_list:Lobby.RoomList.rooms)
  return _impl_.rooms_;
}

// -------------------------------------------------------------------

// SelectRoom

// string name = 1;
inline void SelectRoom::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SelectRoom::name() const {
  // @@protoc_insertion_point(field_get:Lobby.SelectRoom.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectRoom::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Lobby.SelectRoom.name)
}
inline std::string* SelectRoom::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Lobby.SelectRoom.name)
  return _s;
}
inline const std::string& SelectRoom::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SelectRoom::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectRoom::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SelectRoom::release_name() {
  // @@protoc_insertion_point(field_release:Lobby.SelectRoom.name)
  return _impl_.name_.Release();
}
inline void SelectRoom::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Lobby.SelectRoom.name)
}

// int32 max_user = 2;
inline void SelectRoom::clear_max_user() {
  _impl_.max_user_ = 0;
}
inline int32_t SelectRoom::_internal_max_user() const {
  return _impl_.max_user_;
}
inline int32_t SelectRoom::max_user() const {
  // @@protoc_insertion_point(field_get:Lobby.SelectRoom.max_user)
  return _internal_max_user();
}
inline void SelectRoom::_internal_set_max_user(int32_t value) {
  
  _impl_.max_user_ = value;
}
inline void SelectRoom::set_max_user(int32_t value) {
  _internal_set_max_user(value);
  // @@protoc_insertion_point(field_set:Lobby.SelectRoom.max_user)
}

// .Lobby.RoomType type = 3;
inline void SelectRoom::clear_type() {
  _impl_.type_ = 0;
}
inline ::Lobby::RoomType SelectRoom::_internal_type() const {
  return static_cast< ::Lobby::RoomType >(_impl_.type_);
}
inline ::Lobby::RoomType SelectRoom::type() const {
  // @@protoc_insertion_point(field_get:Lobby.SelectRoom.type)
  return _internal_type();
}
inline void SelectRoom::_internal_set_type(::Lobby::RoomType value) {
  
  _impl_.type_ = value;
}
inline void SelectRoom::set_type(::Lobby::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Lobby.SelectRoom.type)
}

// -------------------------------------------------------------------

// CreateRoom

// string name = 1;
inline void CreateRoom::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateRoom::name() const {
  // @@protoc_insertion_point(field_get:Lobby.CreateRoom.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoom::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Lobby.CreateRoom.name)
}
inline std::string* CreateRoom::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Lobby.CreateRoom.name)
  return _s;
}
inline const std::string& CreateRoom::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateRoom::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoom::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRoom::release_name() {
  // @@protoc_insertion_point(field_release:Lobby.CreateRoom.name)
  return _impl_.name_.Release();
}
inline void CreateRoom::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Lobby.CreateRoom.name)
}

// int32 max_user = 2;
inline void CreateRoom::clear_max_user() {
  _impl_.max_user_ = 0;
}
inline int32_t CreateRoom::_internal_max_user() const {
  return _impl_.max_user_;
}
inline int32_t CreateRoom::max_user() const {
  // @@protoc_insertion_point(field_get:Lobby.CreateRoom.max_user)
  return _internal_max_user();
}
inline void CreateRoom::_internal_set_max_user(int32_t value) {
  
  _impl_.max_user_ = value;
}
inline void CreateRoom::set_max_user(int32_t value) {
  _internal_set_max_user(value);
  // @@protoc_insertion_point(field_set:Lobby.CreateRoom.max_user)
}

// .Lobby.RoomType type = 3;
inline void CreateRoom::clear_type() {
  _impl_.type_ = 0;
}
inline ::Lobby::RoomType CreateRoom::_internal_type() const {
  return static_cast< ::Lobby::RoomType >(_impl_.type_);
}
inline ::Lobby::RoomType CreateRoom::type() const {
  // @@protoc_insertion_point(field_get:Lobby.CreateRoom.type)
  return _internal_type();
}
inline void CreateRoom::_internal_set_type(::Lobby::RoomType value) {
  
  _impl_.type_ = value;
}
inline void CreateRoom::set_type(::Lobby::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Lobby.CreateRoom.type)
}

// -------------------------------------------------------------------

// ConnectRoom

// int32 id = 1;
inline void ConnectRoom::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ConnectRoom::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ConnectRoom::id() const {
  // @@protoc_insertion_point(field_get:Lobby.ConnectRoom.id)
  return _internal_id();
}
inline void ConnectRoom::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ConnectRoom::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Lobby.ConnectRoom.id)
}

// -------------------------------------------------------------------

// UserList_User

// int32 id = 1;
inline void UserList_User::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UserList_User::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserList_User::id() const {
  // @@protoc_insertion_point(field_get:Lobby.UserList.User.id)
  return _internal_id();
}
inline void UserList_User::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UserList_User::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Lobby.UserList.User.id)
}

// string name = 2;
inline void UserList_User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserList_User::name() const {
  // @@protoc_insertion_point(field_get:Lobby.UserList.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList_User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Lobby.UserList.User.name)
}
inline std::string* UserList_User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Lobby.UserList.User.name)
  return _s;
}
inline const std::string& UserList_User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserList_User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserList_User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserList_User::release_name() {
  // @@protoc_insertion_point(field_release:Lobby.UserList.User.name)
  return _impl_.name_.Release();
}
inline void UserList_User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Lobby.UserList.User.name)
}

// -------------------------------------------------------------------

// UserList

// repeated .Lobby.UserList.User users = 1;
inline int UserList::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int UserList::users_size() const {
  return _internal_users_size();
}
inline void UserList::clear_users() {
  _impl_.users_.Clear();
}
inline ::Lobby::UserList_User* UserList::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Lobby.UserList.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::UserList_User >*
UserList::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Lobby.UserList.users)
  return &_impl_.users_;
}
inline const ::Lobby::UserList_User& UserList::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::Lobby::UserList_User& UserList::users(int index) const {
  // @@protoc_insertion_point(field_get:Lobby.UserList.users)
  return _internal_users(index);
}
inline ::Lobby::UserList_User* UserList::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::Lobby::UserList_User* UserList::add_users() {
  ::Lobby::UserList_User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:Lobby.UserList.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lobby::UserList_User >&
UserList::users() const {
  // @@protoc_insertion_point(field_list:Lobby.UserList.users)
  return _impl_.users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Lobby

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Lobby::RoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Lobby::RoomType>() {
  return ::Lobby::RoomType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Lobby_2eproto
